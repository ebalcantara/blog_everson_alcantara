{
  
    
        "post0": {
            "title": "Corretor ortográfico com Python",
            "content": "with open(&quot;dados/artigos.txt&quot;, &quot;r&quot;, encoding = &#39;utf8&#39;) as f: artigos = f.read() print(artigos[:500]) . len(artigos) . texto_exemplo = &quot;Olá, tudo bem?&quot; tokens = texto_exemplo.split() print(len(tokens)) . !pip3 install nltk import nltk nltk.download(&#39;punkt&#39;) palavras_separadas = nltk.tokenize.word_tokenize(texto_exemplo) . print(palavras_separadas) . len(palavras_separadas) . def separa_palavras(lista_tokens): lista_palavras = [] for token in lista_tokens: if token.isalpha(): lista_palavras.append(token) return lista_palavras separa_palavras(palavras_separadas) . lista_tokens = nltk.tokenize.word_tokenize(artigos) lista_palavras = separa_palavras(lista_tokens) print(f&quot; O número de palavras é {len(lista_palavras)}&quot;) . def normalizacao(lista_palavras): lista_normalizada = [] for palavra in lista_palavras: lista_normalizada.append(palavra.lower()) return lista_normalizada lista_normalizada = normalizacao(lista_palavras) print(lista_normalizada[:5]) . len(set(lista_normalizada)) . O algoritmo funcionar&#225; separando as palavras em (Esqueda + letra + Direita) isso vai ser percorrido por toda palavra, gerando poss&#237;veis candidatas &#224; corre&#231;&#227;o. . palavra_exemplo = &#39;lgica&#39; def gerador_palavras(palavra): fatias = [] for i in range(len(palavra)+1): fatias.append((palavra[:i], palavra[i:])) palavras_geradas = insere_letras(fatias) return palavras_geradas palavras_geradas = gerador_palavras(palavra_exemplo) print(palavras_geradas) . def corretor(palavra): palavras_geradas = gerador_palavras(palavra) palavra_correta = max(palavras_geradas, key = probabilidade) return palavra_correta . frequencia = nltk.FreqDist(lista_normalizada) total_palavras = len(lista_normalizada) frequencia.most_common(10) . def probabilidade(palavras_gerada): return frequencia[palavras_gerada] / total_palavras probabilidade(&quot;lógica&quot;) . corretor(palavra_exemplo) . def cria_dados_teste(nome_arquivo): lista_palavras_teste = [] f = open(nome_arquivo, &#39;r&#39;, encoding = &#39;utf8&#39;) for linha in f: correta, errada = linha.split() lista_palavras_teste.append((correta, errada)) f.close() return lista_palavras_teste lista_teste = cria_dados_teste(&quot;dados/palavras.txt&quot;) lista_teste . def avaliador(testes): numero_palavras = len(testes) acertou = 0 for correta, errada in testes: palavra_corrigida = corretor(errada) if palavra_corrigida == correta: acertou += 1 taxa_acerto = round(acertou*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras&quot;) avaliador(lista_teste) . corretor(&quot;lóigica&quot;) . avaliador(lista_teste) . def insere_letras(fatias): novas_palavras = [] letras = &#39;abcdefghijklmnopqrstuvwxyzàáâãèéêìíîòóôõùúûç&#39; for E, D in fatias: for letra in letras: novas_palavras.append(E + letra + D) return novas_palavras def deletando_caracteres(fatias): novas_palavras = [] for E, D in fatias: novas_palavras.append(E + D[1:]) return novas_palavras def troca_letra(fatias): novas_palavras = [] letras = &#39;abcdefghijklmnopqrstuvwxyzàáâãèéêìíîòóôõùúûç&#39; for E, D in fatias: for letra in letras: novas_palavras.append(E + letra + D[1:]) return novas_palavras def invertendo_caracteres(fatias): novas_palavras = [] for E, D in fatias: if len(D) &gt; 1: novas_palavras.append(E + D[1] + D[0] + D[2:]) return novas_palavras def gerador_palavras(palavra): fatias = [] for i in range(len(palavra)+1): fatias.append((palavra[:i], palavra[i:])) palavras_geradas = insere_letras(fatias) palavras_geradas += deletando_caracteres(fatias) palavras_geradas += troca_letra(fatias) palavras_geradas += invertendo_caracteres(fatias) return palavras_geradas palavra_exemplo = &quot;lgóica&quot; palavras_geradas = gerador_palavras(palavra_exemplo) print(palavras_geradas) . avaliador(lista_teste) . def avaliador(testes, vocabulario): numero_palavras = len(testes) acertou = 0 desconhecida = 0 for correta, errada in testes: palavra_corrigida = corretor(errada) if palavra_corrigida == correta: acertou += 1 else: desconhecida += (correta not in vocabulario) taxa_acerto = round(acertou*100 / numero_palavras, 2) taxa_desconhecida = round(desconhecida*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}%&quot;) vocabulario = set(lista_normalizada) avaliador(lista_teste, vocabulario) . palavra = &#39;lóiigica&#39; def gerador_turbinado(palavras_geradas): novas_palavras = [] for palavra in palavras_geradas: novas_palavras += gerador_palavras(palavra) return novas_palavras palavras_g = gerador_turbinado(gerador_palavras(palavra)) &quot;lógica&quot; in palavras_g . len(palavras_g) . def novo_corretor(palavra): palavras_geradas = gerador_palavras(palavra) palavras_turbinado = gerador_turbinado(palavras_geradas) todas_palavras = set(palavras_geradas + palavras_turbinado) candidatos = [palavra] for palavra in todas_palavras: if palavra in vocabulario: candidatos.append(palavra) palavra_correta = max(candidatos, key = probabilidade) return palavra_correta novo_corretor(palavra) . def avaliador(testes, vocabulario): numero_palavras = len(testes) acertou = 0 desconhecida = 0 for correta, errada in testes: palavra_corrigida = novo_corretor(errada) desconhecida += (correta not in vocabulario) if palavra_corrigida == correta: acertou += 1 else: print(errada + &quot; - &quot; + corretor(errada) + &quot; - &quot; + palavra_corrigida) taxa_acerto = round(acertou*100 / numero_palavras, 2) taxa_desconhecida = round(desconhecida*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}%&quot;) vocabulario = set(lista_normalizada) avaliador(lista_teste, vocabulario) . def avaliador(testes, vocabulario): numero_palavras = len(testes) acertou = 0 desconhecida = 0 for correta, errada in testes: palavra_corrigida = corretor(errada) desconhecida += (correta not in vocabulario) if palavra_corrigida == correta: acertou += 1 taxa_acerto = round(acertou*100 / numero_palavras, 2) taxa_desconhecida = round(desconhecida*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}%&quot;) vocabulario = set(lista_normalizada) avaliador(lista_teste, vocabulario) . palavra = &quot;lóigica&quot; print(novo_corretor(palavra)) print(corretor(palavra)) .",
            "url": "https://ebalcantara.github.io/blog_everson_alcantara/blog/2022/06/07/Corretor.html",
            "relUrl": "/blog/2022/06/07/Corretor.html",
            "date": " • Jun 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ebalcantara.github.io/blog_everson_alcantara/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ebalcantara.github.io/blog_everson_alcantara/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
{
  
    
        "post0": {
            "title": "Corretor ortográfico com Python",
            "content": "with open(&quot;dados/artigos.txt&quot;, &quot;r&quot;, encoding = &#39;utf8&#39;) as f: artigos = f.read() print(artigos[:500]) . imagem Temos a seguinte classe que representa um usuário no nosso sistema: java Para salvar um novo usuário, várias validações são feitas, como por exemplo: Ver se o nome só contém letras, [**o CPF só números**] e ver se o usuário possui no mínimo 18 anos. Veja o método que faz essa validação: java Suponha agora que eu tenha outra classe, a classe `Produto`, que contém um atributo nome e eu quero fazer a mesma validação que fiz para o nome do usuário: Ver se só contém letras. E aí? Vou . len(artigos) . 2605046 . texto_exemplo = &quot;Olá, tudo bem?&quot; tokens = texto_exemplo.split() print(len(tokens)) . 3 . !pip3 install nltk import nltk nltk.download(&#39;punkt&#39;) palavras_separadas = nltk.tokenize.word_tokenize(texto_exemplo) . Requirement already satisfied: nltk in c: python310 lib site-packages (3.7) Requirement already satisfied: joblib in c: python310 lib site-packages (from nltk) (1.1.0) Requirement already satisfied: tqdm in c: python310 lib site-packages (from nltk) (4.64.0) Requirement already satisfied: regex&gt;=2021.8.3 in c: python310 lib site-packages (from nltk) (2022.6.2) Requirement already satisfied: click in c: python310 lib site-packages (from nltk) (8.1.3) Requirement already satisfied: colorama in c: python310 lib site-packages (from click-&gt;nltk) (0.4.4) . [nltk_data] Downloading package punkt to [nltk_data] C: Users evers AppData Roaming nltk_data... [nltk_data] Package punkt is already up-to-date! . print(palavras_separadas) . [&#39;Olá&#39;, &#39;,&#39;, &#39;tudo&#39;, &#39;bem&#39;, &#39;?&#39;] . len(palavras_separadas) . 5 . def separa_palavras(lista_tokens): lista_palavras = [] for token in lista_tokens: if token.isalpha(): lista_palavras.append(token) return lista_palavras separa_palavras(palavras_separadas) . [&#39;Olá&#39;, &#39;tudo&#39;, &#39;bem&#39;] . lista_tokens = nltk.tokenize.word_tokenize(artigos) lista_palavras = separa_palavras(lista_tokens) print(f&quot; O número de palavras é {len(lista_palavras)}&quot;) . O número de palavras é 403031 . def normalizacao(lista_palavras): lista_normalizada = [] for palavra in lista_palavras: lista_normalizada.append(palavra.lower()) return lista_normalizada lista_normalizada = normalizacao(lista_palavras) print(lista_normalizada[:5]) . [&#39;imagem&#39;, &#39;temos&#39;, &#39;a&#39;, &#39;seguinte&#39;, &#39;classe&#39;] . len(set(lista_normalizada)) . 18464 . O algoritmo funcionar&#225; separando as palavras em (Esqueda + letra + Direita) isso vai ser percorrido por toda palavra, gerando poss&#237;veis candidatas &#224; corre&#231;&#227;o. . palavra_exemplo = &#39;lgica&#39; def gerador_palavras(palavra): fatias = [] for i in range(len(palavra)+1): fatias.append((palavra[:i], palavra[i:])) palavras_geradas = insere_letras(fatias) return palavras_geradas palavras_geradas = gerador_palavras(palavra_exemplo) print(palavras_geradas) . [&#39;algica&#39;, &#39;blgica&#39;, &#39;clgica&#39;, &#39;dlgica&#39;, &#39;elgica&#39;, &#39;flgica&#39;, &#39;glgica&#39;, &#39;hlgica&#39;, &#39;ilgica&#39;, &#39;jlgica&#39;, &#39;klgica&#39;, &#39;llgica&#39;, &#39;mlgica&#39;, &#39;nlgica&#39;, &#39;olgica&#39;, &#39;plgica&#39;, &#39;qlgica&#39;, &#39;rlgica&#39;, &#39;slgica&#39;, &#39;tlgica&#39;, &#39;ulgica&#39;, &#39;vlgica&#39;, &#39;wlgica&#39;, &#39;xlgica&#39;, &#39;ylgica&#39;, &#39;zlgica&#39;, &#39;àlgica&#39;, &#39;álgica&#39;, &#39;âlgica&#39;, &#39;ãlgica&#39;, &#39;èlgica&#39;, &#39;élgica&#39;, &#39;êlgica&#39;, &#39;ìlgica&#39;, &#39;ílgica&#39;, &#39;îlgica&#39;, &#39;òlgica&#39;, &#39;ólgica&#39;, &#39;ôlgica&#39;, &#39;õlgica&#39;, &#39;ùlgica&#39;, &#39;úlgica&#39;, &#39;ûlgica&#39;, &#39;çlgica&#39;, &#39;lagica&#39;, &#39;lbgica&#39;, &#39;lcgica&#39;, &#39;ldgica&#39;, &#39;legica&#39;, &#39;lfgica&#39;, &#39;lggica&#39;, &#39;lhgica&#39;, &#39;ligica&#39;, &#39;ljgica&#39;, &#39;lkgica&#39;, &#39;llgica&#39;, &#39;lmgica&#39;, &#39;lngica&#39;, &#39;logica&#39;, &#39;lpgica&#39;, &#39;lqgica&#39;, &#39;lrgica&#39;, &#39;lsgica&#39;, &#39;ltgica&#39;, &#39;lugica&#39;, &#39;lvgica&#39;, &#39;lwgica&#39;, &#39;lxgica&#39;, &#39;lygica&#39;, &#39;lzgica&#39;, &#39;làgica&#39;, &#39;lágica&#39;, &#39;lâgica&#39;, &#39;lãgica&#39;, &#39;lègica&#39;, &#39;légica&#39;, &#39;lêgica&#39;, &#39;lìgica&#39;, &#39;lígica&#39;, &#39;lîgica&#39;, &#39;lògica&#39;, &#39;lógica&#39;, &#39;lôgica&#39;, &#39;lõgica&#39;, &#39;lùgica&#39;, &#39;lúgica&#39;, &#39;lûgica&#39;, &#39;lçgica&#39;, &#39;lgaica&#39;, &#39;lgbica&#39;, &#39;lgcica&#39;, &#39;lgdica&#39;, &#39;lgeica&#39;, &#39;lgfica&#39;, &#39;lggica&#39;, &#39;lghica&#39;, &#39;lgiica&#39;, &#39;lgjica&#39;, &#39;lgkica&#39;, &#39;lglica&#39;, &#39;lgmica&#39;, &#39;lgnica&#39;, &#39;lgoica&#39;, &#39;lgpica&#39;, &#39;lgqica&#39;, &#39;lgrica&#39;, &#39;lgsica&#39;, &#39;lgtica&#39;, &#39;lguica&#39;, &#39;lgvica&#39;, &#39;lgwica&#39;, &#39;lgxica&#39;, &#39;lgyica&#39;, &#39;lgzica&#39;, &#39;lgàica&#39;, &#39;lgáica&#39;, &#39;lgâica&#39;, &#39;lgãica&#39;, &#39;lgèica&#39;, &#39;lgéica&#39;, &#39;lgêica&#39;, &#39;lgìica&#39;, &#39;lgíica&#39;, &#39;lgîica&#39;, &#39;lgòica&#39;, &#39;lgóica&#39;, &#39;lgôica&#39;, &#39;lgõica&#39;, &#39;lgùica&#39;, &#39;lgúica&#39;, &#39;lgûica&#39;, &#39;lgçica&#39;, &#39;lgiaca&#39;, &#39;lgibca&#39;, &#39;lgicca&#39;, &#39;lgidca&#39;, &#39;lgieca&#39;, &#39;lgifca&#39;, &#39;lgigca&#39;, &#39;lgihca&#39;, &#39;lgiica&#39;, &#39;lgijca&#39;, &#39;lgikca&#39;, &#39;lgilca&#39;, &#39;lgimca&#39;, &#39;lginca&#39;, &#39;lgioca&#39;, &#39;lgipca&#39;, &#39;lgiqca&#39;, &#39;lgirca&#39;, &#39;lgisca&#39;, &#39;lgitca&#39;, &#39;lgiuca&#39;, &#39;lgivca&#39;, &#39;lgiwca&#39;, &#39;lgixca&#39;, &#39;lgiyca&#39;, &#39;lgizca&#39;, &#39;lgiàca&#39;, &#39;lgiáca&#39;, &#39;lgiâca&#39;, &#39;lgiãca&#39;, &#39;lgièca&#39;, &#39;lgiéca&#39;, &#39;lgiêca&#39;, &#39;lgiìca&#39;, &#39;lgiíca&#39;, &#39;lgiîca&#39;, &#39;lgiòca&#39;, &#39;lgióca&#39;, &#39;lgiôca&#39;, &#39;lgiõca&#39;, &#39;lgiùca&#39;, &#39;lgiúca&#39;, &#39;lgiûca&#39;, &#39;lgiçca&#39;, &#39;lgicaa&#39;, &#39;lgicba&#39;, &#39;lgicca&#39;, &#39;lgicda&#39;, &#39;lgicea&#39;, &#39;lgicfa&#39;, &#39;lgicga&#39;, &#39;lgicha&#39;, &#39;lgicia&#39;, &#39;lgicja&#39;, &#39;lgicka&#39;, &#39;lgicla&#39;, &#39;lgicma&#39;, &#39;lgicna&#39;, &#39;lgicoa&#39;, &#39;lgicpa&#39;, &#39;lgicqa&#39;, &#39;lgicra&#39;, &#39;lgicsa&#39;, &#39;lgicta&#39;, &#39;lgicua&#39;, &#39;lgicva&#39;, &#39;lgicwa&#39;, &#39;lgicxa&#39;, &#39;lgicya&#39;, &#39;lgicza&#39;, &#39;lgicàa&#39;, &#39;lgicáa&#39;, &#39;lgicâa&#39;, &#39;lgicãa&#39;, &#39;lgicèa&#39;, &#39;lgicéa&#39;, &#39;lgicêa&#39;, &#39;lgicìa&#39;, &#39;lgicía&#39;, &#39;lgicîa&#39;, &#39;lgicòa&#39;, &#39;lgicóa&#39;, &#39;lgicôa&#39;, &#39;lgicõa&#39;, &#39;lgicùa&#39;, &#39;lgicúa&#39;, &#39;lgicûa&#39;, &#39;lgicça&#39;, &#39;lgicaa&#39;, &#39;lgicab&#39;, &#39;lgicac&#39;, &#39;lgicad&#39;, &#39;lgicae&#39;, &#39;lgicaf&#39;, &#39;lgicag&#39;, &#39;lgicah&#39;, &#39;lgicai&#39;, &#39;lgicaj&#39;, &#39;lgicak&#39;, &#39;lgical&#39;, &#39;lgicam&#39;, &#39;lgican&#39;, &#39;lgicao&#39;, &#39;lgicap&#39;, &#39;lgicaq&#39;, &#39;lgicar&#39;, &#39;lgicas&#39;, &#39;lgicat&#39;, &#39;lgicau&#39;, &#39;lgicav&#39;, &#39;lgicaw&#39;, &#39;lgicax&#39;, &#39;lgicay&#39;, &#39;lgicaz&#39;, &#39;lgicaà&#39;, &#39;lgicaá&#39;, &#39;lgicaâ&#39;, &#39;lgicaã&#39;, &#39;lgicaè&#39;, &#39;lgicaé&#39;, &#39;lgicaê&#39;, &#39;lgicaì&#39;, &#39;lgicaí&#39;, &#39;lgicaî&#39;, &#39;lgicaò&#39;, &#39;lgicaó&#39;, &#39;lgicaô&#39;, &#39;lgicaõ&#39;, &#39;lgicaù&#39;, &#39;lgicaú&#39;, &#39;lgicaû&#39;, &#39;lgicaç&#39;] . def corretor(palavra): palavras_geradas = gerador_palavras(palavra) palavra_correta = max(palavras_geradas, key = probabilidade) return palavra_correta . frequencia = nltk.FreqDist(lista_normalizada) total_palavras = len(lista_normalizada) frequencia.most_common(10) . [(&#39;de&#39;, 15502), (&#39;o&#39;, 14056), (&#39;que&#39;, 12230), (&#39;a&#39;, 11099), (&#39;e&#39;, 10501), (&#39;para&#39;, 7710), (&#39;um&#39;, 6367), (&#39;é&#39;, 5899), (&#39;uma&#39;, 5220), (&#39;do&#39;, 5124)] . def probabilidade(palavras_gerada): return frequencia[palavras_gerada] / total_palavras probabilidade(&quot;lógica&quot;) . 0.00023819507680550628 . corretor(palavra_exemplo) . &#39;lógica&#39; . def cria_dados_teste(nome_arquivo): lista_palavras_teste = [] f = open(nome_arquivo, &#39;r&#39;, encoding = &#39;utf8&#39;) for linha in f: correta, errada = linha.split() lista_palavras_teste.append((correta, errada)) f.close() return lista_palavras_teste lista_teste = cria_dados_teste(&quot;dados/palavras.txt&quot;) lista_teste . [(&#39;podemos&#39;, &#39;pyodemos&#39;), (&#39;esse&#39;, &#39;esje&#39;), (&#39;já&#39;, &#39;jrá&#39;), (&#39;nosso&#39;, &#39;nossov&#39;), (&#39;são&#39;, &#39;sãêo&#39;), (&#39;dos&#39;, &#39;dosa&#39;), (&#39;muito&#39;, &#39;muifo&#39;), (&#39;imagem&#39;, &#39;iômagem&#39;), (&#39;sua&#39;, &#39;ósua&#39;), (&#39;também&#39;, &#39;tambéùm&#39;), (&#39;ele&#39;, &#39;eme&#39;), (&#39;fazer&#39;, &#39;èazer&#39;), (&#39;temos&#39;, &#39;temfs&#39;), (&#39;essa&#39;, &#39;eàssa&#39;), (&#39;quando&#39;, &#39;quaôdo&#39;), (&#39;vamos&#39;, &#39;vamvos&#39;), (&#39;sobre&#39;, &#39;hsobre&#39;), (&#39;java&#39;, &#39;sjava&#39;), (&#39;das&#39;, &#39;daõs&#39;), (&#39;agora&#39;, &#39;agorah&#39;), (&#39;está&#39;, &#39;eòtá&#39;), (&#39;cada&#39;, &#39;céda&#39;), (&#39;mesmo&#39;, &#39;zmesmo&#39;), (&#39;nos&#39;, &#39;noâ&#39;), (&#39;forma&#39;, &#39;fobma&#39;), (&#39;seja&#39;, &#39;sejéa&#39;), (&#39;então&#39;, &#39;enêão&#39;), (&#39;criar&#39;, &#39;èriar&#39;), (&#39;código&#39;, &#39;cóeigo&#39;), (&#39;caso&#39;, &#39;casío&#39;), (&#39;exemplo&#39;, &#39;áexemplo&#39;), (&#39;tem&#39;, &#39;tĩem&#39;), (&#39;usuário&#39;, &#39;usuárôio&#39;), (&#39;dados&#39;, &#39;dfados&#39;), (&#39;python&#39;, &#39;pgthon&#39;), (&#39;nossa&#39;, &#39;nossah&#39;), (&#39;além&#39;, &#39;alémè&#39;), (&#39;assim&#39;, &#39;asõim&#39;), (&#39;ter&#39;, &#39;teb&#39;), (&#39;até&#39;, &#39;atĩ&#39;), (&#39;bem&#39;, &#39;âem&#39;), (&#39;design&#39;, &#39;desigen&#39;), (&#39;trabalho&#39;, &#39;trabalàho&#39;), (&#39;foi&#39;, &#39;foo&#39;), (&#39;apenas&#39;, &#39;apenaũ&#39;), (&#39;empresa&#39;, &#39;empresà&#39;), (&#39;valor&#39;, &#39;valíor&#39;), (&#39;será&#39;, &#39;serr&#39;), (&#39;entre&#39;, &#39;entke&#39;), (&#39;método&#39;, &#39;méqodo&#39;), (&#39;precisamos&#39;, &#39;precisamops&#39;), (&#39;ainda&#39;, &#39;ainàa&#39;), (&#39;vai&#39;, &#39;van&#39;), (&#39;conteúdo&#39;, &#39;ûconteúdo&#39;), (&#39;seus&#39;, &#39;çeus&#39;), (&#39;eu&#39;, &#39;eû&#39;), (&#39;todos&#39;, &#39;todtos&#39;), (&#39;tempo&#39;, &#39;temeo&#39;), (&#39;sempre&#39;, &#39;semre&#39;), (&#39;qual&#39;, &#39;quakl&#39;), (&#39;ela&#39;, &#39;elaá&#39;), (&#39;só&#39;, &#39;síó&#39;), (&#39;utilizar&#39;, &#39;utiqizar&#39;), (&#39;projeto&#39;, &#39;prhojeto&#39;), (&#39;site&#39;, &#39;siàe&#39;), (&#39;sem&#39;, &#39;seém&#39;), (&#39;pelo&#39;, &#39;peln&#39;), (&#39;alura&#39;, &#39;aléra&#39;), (&#39;dia&#39;, &#39;tdia&#39;), (&#39;tudo&#39;, &#39;tuúo&#39;), (&#39;podemos&#39;, &#39;kpodemos&#39;), (&#39;esse&#39;, &#39;eẽsse&#39;), (&#39;já&#39;, &#39;jé&#39;), (&#39;nosso&#39;, &#39;nçosso&#39;), (&#39;são&#39;, &#39;sãô&#39;), (&#39;dos&#39;, &#39;odos&#39;), (&#39;muito&#39;, &#39;tuito&#39;), (&#39;imagem&#39;, &#39;imõgem&#39;), (&#39;sua&#39;, &#39;siua&#39;), (&#39;também&#39;, &#39;tamvbém&#39;), (&#39;ele&#39;, &#39;elpe&#39;), (&#39;fazer&#39;, &#39;façzer&#39;), (&#39;temos&#39;, &#39;teos&#39;), (&#39;essa&#39;, &#39;eũsa&#39;), (&#39;quando&#39;, &#39;quaìdo&#39;), (&#39;vamos&#39;, &#39;vjmos&#39;), (&#39;sobre&#39;, &#39;sxobre&#39;), (&#39;java&#39;, &#39;jkva&#39;), (&#39;das&#39;, &#39;dms&#39;), (&#39;agora&#39;, &#39;agtora&#39;), (&#39;está&#39;, &#39;esútá&#39;), (&#39;cada&#39;, &#39;cava&#39;), (&#39;mesmo&#39;, &#39;medmo&#39;), (&#39;nos&#39;, &#39;ános&#39;), (&#39;forma&#39;, &#39;forûa&#39;), (&#39;seja&#39;, &#39;smeja&#39;), (&#39;então&#39;, &#39;enjtão&#39;), (&#39;criar&#39;, &#39;criôar&#39;), (&#39;código&#39;, &#39;cóàigo&#39;), (&#39;caso&#39;, &#39;èaso&#39;), (&#39;exemplo&#39;, &#39;exbemplo&#39;), (&#39;tem&#39;, &#39;túem&#39;), (&#39;usuário&#39;, &#39;usuárin&#39;), (&#39;dados&#39;, &#39;daáos&#39;), (&#39;python&#39;, &#39;pythoçn&#39;), (&#39;nossa&#39;, &#39;nossk&#39;), (&#39;além&#39;, &#39;âlém&#39;), (&#39;assim&#39;, &#39;aóssim&#39;), (&#39;ter&#39;, &#39;tãer&#39;), (&#39;até&#39;, &#39;vté&#39;), (&#39;bem&#39;, &#39;búm&#39;), (&#39;design&#39;, &#39;íesign&#39;), (&#39;trabalho&#39;, &#39;trabèalho&#39;), (&#39;foi&#39;, &#39;kfoi&#39;), (&#39;apenas&#39;, &#39;aapenas&#39;), (&#39;empresa&#39;, &#39;pmpresa&#39;), (&#39;valor&#39;, &#39;valoqr&#39;), (&#39;será&#39;, &#39;sçerá&#39;), (&#39;entre&#39;, &#39;entró&#39;), (&#39;método&#39;, &#39;nétodo&#39;), (&#39;precisamos&#39;, &#39;prefcisamos&#39;), (&#39;ainda&#39;, &#39;sainda&#39;), (&#39;vai&#39;, &#39;uai&#39;), (&#39;conteúdo&#39;, &#39;cĩonteúdo&#39;), (&#39;seus&#39;, &#39;sâus&#39;), (&#39;eu&#39;, &#39;ìeu&#39;), (&#39;todos&#39;, &#39;todás&#39;), (&#39;tempo&#39;, &#39;utempo&#39;), (&#39;sempre&#39;, &#39;sempce&#39;), (&#39;qual&#39;, &#39;fual&#39;), (&#39;ela&#39;, &#39;elal&#39;), (&#39;só&#39;, &#39;skó&#39;), (&#39;utilizar&#39;, &#39;utilĩzar&#39;), (&#39;projeto&#39;, &#39;proójeto&#39;), (&#39;site&#39;, &#39;isite&#39;), (&#39;sem&#39;, &#39;secm&#39;), (&#39;pelo&#39;, &#39;pẽlo&#39;), (&#39;alura&#39;, &#39;aluéa&#39;), (&#39;dia&#39;, &#39;dil&#39;), (&#39;tudo&#39;, &#39;tudy&#39;), (&#39;ela&#39;, &#39;qelay&#39;), (&#39;só&#39;, &#39;sód&#39;), (&#39;utilizar&#39;, &#39;dtilizacr&#39;), (&#39;projeto&#39;, &#39;bprojõto&#39;), (&#39;site&#39;, &#39;ysiteo&#39;), (&#39;sem&#39;, &#39;sõêm&#39;), (&#39;pelo&#39;, &#39;peàli&#39;), (&#39;alura&#39;, &#39;asuraó&#39;), (&#39;dia&#39;, &#39;deiìa&#39;), (&#39;tudo&#39;, &#39;tuĩdoì&#39;), (&#39;ela&#39;, &#39;eúaa&#39;), (&#39;só&#39;, &#39;ró&#39;), (&#39;utilizar&#39;, &#39;utilizẽaçr&#39;), (&#39;projeto&#39;, &#39;prêjetó&#39;), (&#39;site&#39;, &#39;sqiqte&#39;), (&#39;sem&#39;, &#39;sũexm&#39;), (&#39;pelo&#39;, &#39;pçlxo&#39;), (&#39;alura&#39;, &#39;uluraa&#39;), (&#39;dia&#39;, &#39;dĩaz&#39;), (&#39;tudo&#39;, &#39;kzudo&#39;), (&#39;corretor&#39;, &#39;correptor&#39;), (&#39;tática&#39;, &#39;trtica&#39;), (&#39;empoderamento&#39;, &#39;ewpoderamento&#39;), (&#39;linux&#39;, &#39;lifux&#39;), (&#39;cachorro&#39;, &#39;cachoçro&#39;), (&#39;gato&#39;, &#39;îgato&#39;), (&#39;cavalo&#39;, &#39;cakvalo&#39;), (&#39;relógio&#39;, &#39;relógiuo&#39;), (&#39;canela&#39;, &#39;canelac&#39;), (&#39;tênis&#39;, &#39;tênisy&#39;), (&#39;ansiosa&#39;, &#39;anciosa&#39;), (&#39;ansiosa&#39;, &#39;ancciosa&#39;), (&#39;ansiosa&#39;, &#39;ansioa&#39;), (&#39;empoderamento&#39;, &#39;empoderamento&#39;), (&#39;asterisco&#39;, &#39;asterístico&#39;), (&#39;gratuito&#39;, &#39;gratuíto&#39;), (&#39;entretido&#39;, &#39;entertido&#39;), (&#39;ritmo&#39;, &#39;ritimo&#39;), (&#39;idiota&#39;, &#39;indiota&#39;), (&#39;tomara&#39;, &#39;tomare&#39;), (&#39;seja&#39;, &#39;seje&#39;), (&#39;prevalecer&#39;, &#39;provalecer&#39;), (&#39;esteja&#39;, &#39;esteje&#39;), (&#39;mendigo&#39;, &#39;mindigo&#39;), (&#39;cérebro&#39;, &#39;célebro&#39;), (&#39;perturbar&#39;, &#39;pertubar&#39;)] . def avaliador(testes): numero_palavras = len(testes) acertou = 0 for correta, errada in testes: palavra_corrigida = corretor(errada) if palavra_corrigida == correta: acertou += 1 taxa_acerto = round(acertou*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras&quot;) avaliador(lista_teste) . 1.08% de 186 palavras . corretor(&quot;lóigica&quot;) . &#39;lógica&#39; . avaliador(lista_teste) . 41.4% de 186 palavras . def insere_letras(fatias): novas_palavras = [] letras = &#39;abcdefghijklmnopqrstuvwxyzàáâãèéêìíîòóôõùúûç&#39; for E, D in fatias: for letra in letras: novas_palavras.append(E + letra + D) return novas_palavras def deletando_caracteres(fatias): novas_palavras = [] for E, D in fatias: novas_palavras.append(E + D[1:]) return novas_palavras def troca_letra(fatias): novas_palavras = [] letras = &#39;abcdefghijklmnopqrstuvwxyzàáâãèéêìíîòóôõùúûç&#39; for E, D in fatias: for letra in letras: novas_palavras.append(E + letra + D[1:]) return novas_palavras def invertendo_caracteres(fatias): novas_palavras = [] for E, D in fatias: if len(D) &gt; 1: novas_palavras.append(E + D[1] + D[0] + D[2:]) return novas_palavras def gerador_palavras(palavra): fatias = [] for i in range(len(palavra)+1): fatias.append((palavra[:i], palavra[i:])) palavras_geradas = insere_letras(fatias) palavras_geradas += deletando_caracteres(fatias) palavras_geradas += troca_letra(fatias) palavras_geradas += invertendo_caracteres(fatias) return palavras_geradas palavra_exemplo = &quot;lgóica&quot; palavras_geradas = gerador_palavras(palavra_exemplo) print(palavras_geradas) . [&#39;algóica&#39;, &#39;blgóica&#39;, &#39;clgóica&#39;, &#39;dlgóica&#39;, &#39;elgóica&#39;, &#39;flgóica&#39;, &#39;glgóica&#39;, &#39;hlgóica&#39;, &#39;ilgóica&#39;, &#39;jlgóica&#39;, &#39;klgóica&#39;, &#39;llgóica&#39;, &#39;mlgóica&#39;, &#39;nlgóica&#39;, &#39;olgóica&#39;, &#39;plgóica&#39;, &#39;qlgóica&#39;, &#39;rlgóica&#39;, &#39;slgóica&#39;, &#39;tlgóica&#39;, &#39;ulgóica&#39;, &#39;vlgóica&#39;, &#39;wlgóica&#39;, &#39;xlgóica&#39;, &#39;ylgóica&#39;, &#39;zlgóica&#39;, &#39;àlgóica&#39;, &#39;álgóica&#39;, &#39;âlgóica&#39;, &#39;ãlgóica&#39;, &#39;èlgóica&#39;, &#39;élgóica&#39;, &#39;êlgóica&#39;, &#39;ìlgóica&#39;, &#39;ílgóica&#39;, &#39;îlgóica&#39;, &#39;òlgóica&#39;, &#39;ólgóica&#39;, &#39;ôlgóica&#39;, &#39;õlgóica&#39;, &#39;ùlgóica&#39;, &#39;úlgóica&#39;, &#39;ûlgóica&#39;, &#39;çlgóica&#39;, &#39;lagóica&#39;, &#39;lbgóica&#39;, &#39;lcgóica&#39;, &#39;ldgóica&#39;, &#39;legóica&#39;, &#39;lfgóica&#39;, &#39;lggóica&#39;, &#39;lhgóica&#39;, &#39;ligóica&#39;, &#39;ljgóica&#39;, &#39;lkgóica&#39;, &#39;llgóica&#39;, &#39;lmgóica&#39;, &#39;lngóica&#39;, &#39;logóica&#39;, &#39;lpgóica&#39;, &#39;lqgóica&#39;, &#39;lrgóica&#39;, &#39;lsgóica&#39;, &#39;ltgóica&#39;, &#39;lugóica&#39;, &#39;lvgóica&#39;, &#39;lwgóica&#39;, &#39;lxgóica&#39;, &#39;lygóica&#39;, &#39;lzgóica&#39;, &#39;làgóica&#39;, &#39;lágóica&#39;, &#39;lâgóica&#39;, &#39;lãgóica&#39;, &#39;lègóica&#39;, &#39;légóica&#39;, &#39;lêgóica&#39;, &#39;lìgóica&#39;, &#39;lígóica&#39;, &#39;lîgóica&#39;, &#39;lògóica&#39;, &#39;lógóica&#39;, &#39;lôgóica&#39;, &#39;lõgóica&#39;, &#39;lùgóica&#39;, &#39;lúgóica&#39;, &#39;lûgóica&#39;, &#39;lçgóica&#39;, &#39;lgaóica&#39;, &#39;lgbóica&#39;, &#39;lgcóica&#39;, &#39;lgdóica&#39;, &#39;lgeóica&#39;, &#39;lgfóica&#39;, &#39;lggóica&#39;, &#39;lghóica&#39;, &#39;lgióica&#39;, &#39;lgjóica&#39;, &#39;lgkóica&#39;, &#39;lglóica&#39;, &#39;lgmóica&#39;, &#39;lgnóica&#39;, &#39;lgoóica&#39;, &#39;lgpóica&#39;, &#39;lgqóica&#39;, &#39;lgróica&#39;, &#39;lgsóica&#39;, &#39;lgtóica&#39;, &#39;lguóica&#39;, &#39;lgvóica&#39;, &#39;lgwóica&#39;, &#39;lgxóica&#39;, &#39;lgyóica&#39;, &#39;lgzóica&#39;, &#39;lgàóica&#39;, &#39;lgáóica&#39;, &#39;lgâóica&#39;, &#39;lgãóica&#39;, &#39;lgèóica&#39;, &#39;lgéóica&#39;, &#39;lgêóica&#39;, &#39;lgìóica&#39;, &#39;lgíóica&#39;, &#39;lgîóica&#39;, &#39;lgòóica&#39;, &#39;lgóóica&#39;, &#39;lgôóica&#39;, &#39;lgõóica&#39;, &#39;lgùóica&#39;, &#39;lgúóica&#39;, &#39;lgûóica&#39;, &#39;lgçóica&#39;, &#39;lgóaica&#39;, &#39;lgóbica&#39;, &#39;lgócica&#39;, &#39;lgódica&#39;, &#39;lgóeica&#39;, &#39;lgófica&#39;, &#39;lgógica&#39;, &#39;lgóhica&#39;, &#39;lgóiica&#39;, &#39;lgójica&#39;, &#39;lgókica&#39;, &#39;lgólica&#39;, &#39;lgómica&#39;, &#39;lgónica&#39;, &#39;lgóoica&#39;, &#39;lgópica&#39;, &#39;lgóqica&#39;, &#39;lgórica&#39;, &#39;lgósica&#39;, &#39;lgótica&#39;, &#39;lgóuica&#39;, &#39;lgóvica&#39;, &#39;lgówica&#39;, &#39;lgóxica&#39;, &#39;lgóyica&#39;, &#39;lgózica&#39;, &#39;lgóàica&#39;, &#39;lgóáica&#39;, &#39;lgóâica&#39;, &#39;lgóãica&#39;, &#39;lgóèica&#39;, &#39;lgóéica&#39;, &#39;lgóêica&#39;, &#39;lgóìica&#39;, &#39;lgóíica&#39;, &#39;lgóîica&#39;, &#39;lgóòica&#39;, &#39;lgóóica&#39;, &#39;lgóôica&#39;, &#39;lgóõica&#39;, &#39;lgóùica&#39;, &#39;lgóúica&#39;, &#39;lgóûica&#39;, &#39;lgóçica&#39;, &#39;lgóiaca&#39;, &#39;lgóibca&#39;, &#39;lgóicca&#39;, &#39;lgóidca&#39;, &#39;lgóieca&#39;, &#39;lgóifca&#39;, &#39;lgóigca&#39;, &#39;lgóihca&#39;, &#39;lgóiica&#39;, &#39;lgóijca&#39;, &#39;lgóikca&#39;, &#39;lgóilca&#39;, &#39;lgóimca&#39;, &#39;lgóinca&#39;, &#39;lgóioca&#39;, &#39;lgóipca&#39;, &#39;lgóiqca&#39;, &#39;lgóirca&#39;, &#39;lgóisca&#39;, &#39;lgóitca&#39;, &#39;lgóiuca&#39;, &#39;lgóivca&#39;, &#39;lgóiwca&#39;, &#39;lgóixca&#39;, &#39;lgóiyca&#39;, &#39;lgóizca&#39;, &#39;lgóiàca&#39;, &#39;lgóiáca&#39;, &#39;lgóiâca&#39;, &#39;lgóiãca&#39;, &#39;lgóièca&#39;, &#39;lgóiéca&#39;, &#39;lgóiêca&#39;, &#39;lgóiìca&#39;, &#39;lgóiíca&#39;, &#39;lgóiîca&#39;, &#39;lgóiòca&#39;, &#39;lgóióca&#39;, &#39;lgóiôca&#39;, &#39;lgóiõca&#39;, &#39;lgóiùca&#39;, &#39;lgóiúca&#39;, &#39;lgóiûca&#39;, &#39;lgóiçca&#39;, &#39;lgóicaa&#39;, &#39;lgóicba&#39;, &#39;lgóicca&#39;, &#39;lgóicda&#39;, &#39;lgóicea&#39;, &#39;lgóicfa&#39;, &#39;lgóicga&#39;, &#39;lgóicha&#39;, &#39;lgóicia&#39;, &#39;lgóicja&#39;, &#39;lgóicka&#39;, &#39;lgóicla&#39;, &#39;lgóicma&#39;, &#39;lgóicna&#39;, &#39;lgóicoa&#39;, &#39;lgóicpa&#39;, &#39;lgóicqa&#39;, &#39;lgóicra&#39;, &#39;lgóicsa&#39;, &#39;lgóicta&#39;, &#39;lgóicua&#39;, &#39;lgóicva&#39;, &#39;lgóicwa&#39;, &#39;lgóicxa&#39;, &#39;lgóicya&#39;, &#39;lgóicza&#39;, &#39;lgóicàa&#39;, &#39;lgóicáa&#39;, &#39;lgóicâa&#39;, &#39;lgóicãa&#39;, &#39;lgóicèa&#39;, &#39;lgóicéa&#39;, &#39;lgóicêa&#39;, &#39;lgóicìa&#39;, &#39;lgóicía&#39;, &#39;lgóicîa&#39;, &#39;lgóicòa&#39;, &#39;lgóicóa&#39;, &#39;lgóicôa&#39;, &#39;lgóicõa&#39;, &#39;lgóicùa&#39;, &#39;lgóicúa&#39;, &#39;lgóicûa&#39;, &#39;lgóicça&#39;, &#39;lgóicaa&#39;, &#39;lgóicab&#39;, &#39;lgóicac&#39;, &#39;lgóicad&#39;, &#39;lgóicae&#39;, &#39;lgóicaf&#39;, &#39;lgóicag&#39;, &#39;lgóicah&#39;, &#39;lgóicai&#39;, &#39;lgóicaj&#39;, &#39;lgóicak&#39;, &#39;lgóical&#39;, &#39;lgóicam&#39;, &#39;lgóican&#39;, &#39;lgóicao&#39;, &#39;lgóicap&#39;, &#39;lgóicaq&#39;, &#39;lgóicar&#39;, &#39;lgóicas&#39;, &#39;lgóicat&#39;, &#39;lgóicau&#39;, &#39;lgóicav&#39;, &#39;lgóicaw&#39;, &#39;lgóicax&#39;, &#39;lgóicay&#39;, &#39;lgóicaz&#39;, &#39;lgóicaà&#39;, &#39;lgóicaá&#39;, &#39;lgóicaâ&#39;, &#39;lgóicaã&#39;, &#39;lgóicaè&#39;, &#39;lgóicaé&#39;, &#39;lgóicaê&#39;, &#39;lgóicaì&#39;, &#39;lgóicaí&#39;, &#39;lgóicaî&#39;, &#39;lgóicaò&#39;, &#39;lgóicaó&#39;, &#39;lgóicaô&#39;, &#39;lgóicaõ&#39;, &#39;lgóicaù&#39;, &#39;lgóicaú&#39;, &#39;lgóicaû&#39;, &#39;lgóicaç&#39;, &#39;góica&#39;, &#39;lóica&#39;, &#39;lgica&#39;, &#39;lgóca&#39;, &#39;lgóia&#39;, &#39;lgóic&#39;, &#39;lgóica&#39;, &#39;agóica&#39;, &#39;bgóica&#39;, &#39;cgóica&#39;, &#39;dgóica&#39;, &#39;egóica&#39;, &#39;fgóica&#39;, &#39;ggóica&#39;, &#39;hgóica&#39;, &#39;igóica&#39;, &#39;jgóica&#39;, &#39;kgóica&#39;, &#39;lgóica&#39;, &#39;mgóica&#39;, &#39;ngóica&#39;, &#39;ogóica&#39;, &#39;pgóica&#39;, &#39;qgóica&#39;, &#39;rgóica&#39;, &#39;sgóica&#39;, &#39;tgóica&#39;, &#39;ugóica&#39;, &#39;vgóica&#39;, &#39;wgóica&#39;, &#39;xgóica&#39;, &#39;ygóica&#39;, &#39;zgóica&#39;, &#39;àgóica&#39;, &#39;ágóica&#39;, &#39;âgóica&#39;, &#39;ãgóica&#39;, &#39;ègóica&#39;, &#39;égóica&#39;, &#39;êgóica&#39;, &#39;ìgóica&#39;, &#39;ígóica&#39;, &#39;îgóica&#39;, &#39;ògóica&#39;, &#39;ógóica&#39;, &#39;ôgóica&#39;, &#39;õgóica&#39;, &#39;ùgóica&#39;, &#39;úgóica&#39;, &#39;ûgóica&#39;, &#39;çgóica&#39;, &#39;laóica&#39;, &#39;lbóica&#39;, &#39;lcóica&#39;, &#39;ldóica&#39;, &#39;leóica&#39;, &#39;lfóica&#39;, &#39;lgóica&#39;, &#39;lhóica&#39;, &#39;lióica&#39;, &#39;ljóica&#39;, &#39;lkóica&#39;, &#39;llóica&#39;, &#39;lmóica&#39;, &#39;lnóica&#39;, &#39;loóica&#39;, &#39;lpóica&#39;, &#39;lqóica&#39;, &#39;lróica&#39;, &#39;lsóica&#39;, &#39;ltóica&#39;, &#39;luóica&#39;, &#39;lvóica&#39;, &#39;lwóica&#39;, &#39;lxóica&#39;, &#39;lyóica&#39;, &#39;lzóica&#39;, &#39;làóica&#39;, &#39;láóica&#39;, &#39;lâóica&#39;, &#39;lãóica&#39;, &#39;lèóica&#39;, &#39;léóica&#39;, &#39;lêóica&#39;, &#39;lìóica&#39;, &#39;líóica&#39;, &#39;lîóica&#39;, &#39;lòóica&#39;, &#39;lóóica&#39;, &#39;lôóica&#39;, &#39;lõóica&#39;, &#39;lùóica&#39;, &#39;lúóica&#39;, &#39;lûóica&#39;, &#39;lçóica&#39;, &#39;lgaica&#39;, &#39;lgbica&#39;, &#39;lgcica&#39;, &#39;lgdica&#39;, &#39;lgeica&#39;, &#39;lgfica&#39;, &#39;lggica&#39;, &#39;lghica&#39;, &#39;lgiica&#39;, &#39;lgjica&#39;, &#39;lgkica&#39;, &#39;lglica&#39;, &#39;lgmica&#39;, &#39;lgnica&#39;, &#39;lgoica&#39;, &#39;lgpica&#39;, &#39;lgqica&#39;, &#39;lgrica&#39;, &#39;lgsica&#39;, &#39;lgtica&#39;, &#39;lguica&#39;, &#39;lgvica&#39;, &#39;lgwica&#39;, &#39;lgxica&#39;, &#39;lgyica&#39;, &#39;lgzica&#39;, &#39;lgàica&#39;, &#39;lgáica&#39;, &#39;lgâica&#39;, &#39;lgãica&#39;, &#39;lgèica&#39;, &#39;lgéica&#39;, &#39;lgêica&#39;, &#39;lgìica&#39;, &#39;lgíica&#39;, &#39;lgîica&#39;, &#39;lgòica&#39;, &#39;lgóica&#39;, &#39;lgôica&#39;, &#39;lgõica&#39;, &#39;lgùica&#39;, &#39;lgúica&#39;, &#39;lgûica&#39;, &#39;lgçica&#39;, &#39;lgóaca&#39;, &#39;lgóbca&#39;, &#39;lgócca&#39;, &#39;lgódca&#39;, &#39;lgóeca&#39;, &#39;lgófca&#39;, &#39;lgógca&#39;, &#39;lgóhca&#39;, &#39;lgóica&#39;, &#39;lgójca&#39;, &#39;lgókca&#39;, &#39;lgólca&#39;, &#39;lgómca&#39;, &#39;lgónca&#39;, &#39;lgóoca&#39;, &#39;lgópca&#39;, &#39;lgóqca&#39;, &#39;lgórca&#39;, &#39;lgósca&#39;, &#39;lgótca&#39;, &#39;lgóuca&#39;, &#39;lgóvca&#39;, &#39;lgówca&#39;, &#39;lgóxca&#39;, &#39;lgóyca&#39;, &#39;lgózca&#39;, &#39;lgóàca&#39;, &#39;lgóáca&#39;, &#39;lgóâca&#39;, &#39;lgóãca&#39;, &#39;lgóèca&#39;, &#39;lgóéca&#39;, &#39;lgóêca&#39;, &#39;lgóìca&#39;, &#39;lgóíca&#39;, &#39;lgóîca&#39;, &#39;lgóòca&#39;, &#39;lgóóca&#39;, &#39;lgóôca&#39;, &#39;lgóõca&#39;, &#39;lgóùca&#39;, &#39;lgóúca&#39;, &#39;lgóûca&#39;, &#39;lgóçca&#39;, &#39;lgóiaa&#39;, &#39;lgóiba&#39;, &#39;lgóica&#39;, &#39;lgóida&#39;, &#39;lgóiea&#39;, &#39;lgóifa&#39;, &#39;lgóiga&#39;, &#39;lgóiha&#39;, &#39;lgóiia&#39;, &#39;lgóija&#39;, &#39;lgóika&#39;, &#39;lgóila&#39;, &#39;lgóima&#39;, &#39;lgóina&#39;, &#39;lgóioa&#39;, &#39;lgóipa&#39;, &#39;lgóiqa&#39;, &#39;lgóira&#39;, &#39;lgóisa&#39;, &#39;lgóita&#39;, &#39;lgóiua&#39;, &#39;lgóiva&#39;, &#39;lgóiwa&#39;, &#39;lgóixa&#39;, &#39;lgóiya&#39;, &#39;lgóiza&#39;, &#39;lgóiàa&#39;, &#39;lgóiáa&#39;, &#39;lgóiâa&#39;, &#39;lgóiãa&#39;, &#39;lgóièa&#39;, &#39;lgóiéa&#39;, &#39;lgóiêa&#39;, &#39;lgóiìa&#39;, &#39;lgóiía&#39;, &#39;lgóiîa&#39;, &#39;lgóiòa&#39;, &#39;lgóióa&#39;, &#39;lgóiôa&#39;, &#39;lgóiõa&#39;, &#39;lgóiùa&#39;, &#39;lgóiúa&#39;, &#39;lgóiûa&#39;, &#39;lgóiça&#39;, &#39;lgóica&#39;, &#39;lgóicb&#39;, &#39;lgóicc&#39;, &#39;lgóicd&#39;, &#39;lgóice&#39;, &#39;lgóicf&#39;, &#39;lgóicg&#39;, &#39;lgóich&#39;, &#39;lgóici&#39;, &#39;lgóicj&#39;, &#39;lgóick&#39;, &#39;lgóicl&#39;, &#39;lgóicm&#39;, &#39;lgóicn&#39;, &#39;lgóico&#39;, &#39;lgóicp&#39;, &#39;lgóicq&#39;, &#39;lgóicr&#39;, &#39;lgóics&#39;, &#39;lgóict&#39;, &#39;lgóicu&#39;, &#39;lgóicv&#39;, &#39;lgóicw&#39;, &#39;lgóicx&#39;, &#39;lgóicy&#39;, &#39;lgóicz&#39;, &#39;lgóicà&#39;, &#39;lgóicá&#39;, &#39;lgóicâ&#39;, &#39;lgóicã&#39;, &#39;lgóicè&#39;, &#39;lgóicé&#39;, &#39;lgóicê&#39;, &#39;lgóicì&#39;, &#39;lgóicí&#39;, &#39;lgóicî&#39;, &#39;lgóicò&#39;, &#39;lgóicó&#39;, &#39;lgóicô&#39;, &#39;lgóicõ&#39;, &#39;lgóicù&#39;, &#39;lgóicú&#39;, &#39;lgóicû&#39;, &#39;lgóicç&#39;, &#39;lgóicaa&#39;, &#39;lgóicab&#39;, &#39;lgóicac&#39;, &#39;lgóicad&#39;, &#39;lgóicae&#39;, &#39;lgóicaf&#39;, &#39;lgóicag&#39;, &#39;lgóicah&#39;, &#39;lgóicai&#39;, &#39;lgóicaj&#39;, &#39;lgóicak&#39;, &#39;lgóical&#39;, &#39;lgóicam&#39;, &#39;lgóican&#39;, &#39;lgóicao&#39;, &#39;lgóicap&#39;, &#39;lgóicaq&#39;, &#39;lgóicar&#39;, &#39;lgóicas&#39;, &#39;lgóicat&#39;, &#39;lgóicau&#39;, &#39;lgóicav&#39;, &#39;lgóicaw&#39;, &#39;lgóicax&#39;, &#39;lgóicay&#39;, &#39;lgóicaz&#39;, &#39;lgóicaà&#39;, &#39;lgóicaá&#39;, &#39;lgóicaâ&#39;, &#39;lgóicaã&#39;, &#39;lgóicaè&#39;, &#39;lgóicaé&#39;, &#39;lgóicaê&#39;, &#39;lgóicaì&#39;, &#39;lgóicaí&#39;, &#39;lgóicaî&#39;, &#39;lgóicaò&#39;, &#39;lgóicaó&#39;, &#39;lgóicaô&#39;, &#39;lgóicaõ&#39;, &#39;lgóicaù&#39;, &#39;lgóicaú&#39;, &#39;lgóicaû&#39;, &#39;lgóicaç&#39;, &#39;glóica&#39;, &#39;lógica&#39;, &#39;lgióca&#39;, &#39;lgócia&#39;, &#39;lgóiac&#39;] . avaliador(lista_teste) . 76.34% de 186 palavras . def avaliador(testes, vocabulario): numero_palavras = len(testes) acertou = 0 desconhecida = 0 for correta, errada in testes: palavra_corrigida = corretor(errada) if palavra_corrigida == correta: acertou += 1 else: desconhecida += (correta not in vocabulario) taxa_acerto = round(acertou*100 / numero_palavras, 2) taxa_desconhecida = round(desconhecida*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}%&quot;) vocabulario = set(lista_normalizada) avaliador(lista_teste, vocabulario) . 76.34% de 186 palavras, desconhecida é 6.99% . palavra = &#39;lóiigica&#39; def gerador_turbinado(palavras_geradas): novas_palavras = [] for palavra in palavras_geradas: novas_palavras += gerador_palavras(palavra) return novas_palavras palavras_g = gerador_turbinado(gerador_palavras(palavra)) &quot;lógica&quot; in palavras_g . True . len(palavras_g) . 691744 . def novo_corretor(palavra): palavras_geradas = gerador_palavras(palavra) palavras_turbinado = gerador_turbinado(palavras_geradas) todas_palavras = set(palavras_geradas + palavras_turbinado) candidatos = [palavra] for palavra in todas_palavras: if palavra in vocabulario: candidatos.append(palavra) palavra_correta = max(candidatos, key = probabilidade) return palavra_correta novo_corretor(palavra) . &#39;lógica&#39; . def avaliador(testes, vocabulario): numero_palavras = len(testes) acertou = 0 desconhecida = 0 for correta, errada in testes: palavra_corrigida = novo_corretor(errada) desconhecida += (correta not in vocabulario) if palavra_corrigida == correta: acertou += 1 else: print(errada + &quot; - &quot; + corretor(errada) + &quot; - &quot; + palavra_corrigida) taxa_acerto = round(acertou*100 / numero_palavras, 2) taxa_desconhecida = round(desconhecida*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}%&quot;) vocabulario = set(lista_normalizada) avaliador(lista_teste, vocabulario) . esje - esse - se sãêo - são - não dosa - dos - do eme - em - de eàssa - essa - esse daõs - das - da céda - cada - da noâ - no - o enêão - então - não tĩem - tem - em nossah - nossa - nosso teb - tem - de atĩ - até - a âem - em - de foo - foi - o serr - ser - se entke - entre - então van - vai - a çeus - seus - seu eû - e - de temeo - tempo - temos semre - sempre - ser elaá - ela - ele síó - só - se siàe - site - se seém - sem - em peln - pelo - ele aléra - alura - agora tdia - dia - da tuúo - tudo - tipo jé - é - de sãô - são - não odos - dos - do siua - sua - seu elpe - ele - esse teos - temos - os eũsa - essa - esse vjmos - vamos - temos dms - dos - de cava - java - para ános - nos - no èaso - caso - as túem - tem - em daáos - dados - dos nossk - nosso - nosso tãer - ter - ser vté - até - é búm - bem - um sçerá - será - ser entró - entre - então uai - vai - a sâus - seus - seu ìeu - seu - de fual - qual - sua elal - ela - ele skó - só - se secm - sem - em aluéa - alura - além dil - dia - de sód - só - se eúaa - aeúaa - essa ró - só - de dĩaz - adĩaz - da correptor - corretor - correto trtica - tática - prática ewpoderamento - aewpoderamento - ewpoderamento îgato - gato - fato cakvalo - acakvalo - carvalho canelac - acanelac - janela tênisy - atênisy - tênisy anciosa - aanciosa - ansioso ancciosa - aancciosa - ancciosa ansioa - aansioa - antiga asterístico - aasterístico - asterístico entertido - aentertido - entendido ritimo - ritmo - ótimo indiota - aindiota - indica tomare - tomar - tomar seje - seja - se provalecer - aprovalecer - prevalece esteje - esteja - este mindigo - amindigo - indico pertubar - apertubar - derrubar 55.38% de 186 palavras, desconhecida é 6.99% . def avaliador(testes, vocabulario): numero_palavras = len(testes) acertou = 0 desconhecida = 0 for correta, errada in testes: palavra_corrigida = corretor(errada) desconhecida += (correta not in vocabulario) if palavra_corrigida == correta: acertou += 1 taxa_acerto = round(acertou*100 / numero_palavras, 2) taxa_desconhecida = round(desconhecida*100 / numero_palavras, 2) print(f&quot;{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}%&quot;) vocabulario = set(lista_normalizada) avaliador(lista_teste, vocabulario) . 76.34% de 186 palavras, desconhecida é 6.99% . palavra = &quot;lóigica&quot; print(novo_corretor(palavra)) print(corretor(palavra)) . lógica lógica .",
            "url": "https://ebalcantara.github.io/blog_everson_alcantara/2022/06/06/Corretor.html",
            "relUrl": "/2022/06/06/Corretor.html",
            "date": " • Jun 6, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ebalcantara.github.io/blog_everson_alcantara/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ebalcantara.github.io/blog_everson_alcantara/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}